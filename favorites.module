<?php

/**
 * @file
 * The favorites module allows users to bookmark any path within a site.
 */

/**
 * Implements hook_permission().
 */
function favorites_permission() {
  return array(
    'manage own favorites' => array(
      'title' => t('Manage own favorites'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function favorites_menu() {
  $items['favorites/remove/%favorite'] = array(
    'page callback' => 'favorites_remove_favorite',
    'page arguments' => array(2),
    'access arguments' => array('manage own favorites'),
    'title' => 'Remove Favorite',
    'type' => MENU_CALLBACK,
  );
  $items['favorites/js/add'] = array(
    'page callback' => 'favorites_add_favorite_js',
    'access arguments' => array('manage own favorites'),
    'title' => 'Add favorite via js',
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/user-interface/favorites'] = array(
    'title' => 'Favorites',
    'description' => 'Allows users to add paths on a site to their list of favorites.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_favorites_admin'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  if (variable_get('favorites_user_tab_show',_favorites_default_value('favorites_user_tab_show')))
  {
	//only show the user favorites menu if asked
	  $items['user/%/myfavorites'] = array(
		'title' => t(variable_get('favorites_title', _favorites_default_value('favorites_title'))),
		'page callback' => 'favorites_list',
		'page arguments' => array(1),
		'access arguments' => array('manage own favorites'),
		'type' => MENU_LOCAL_TASK,
	  );
  }
  return $items;
}

/**
 * Helper function to load a favorite.
 *
 * @param int $fid
 *   The DB ID of the favorite
 *
 * @return object
 *   The DB row from the favorites table.
 */
function favorite_load($fid) {
  return db_select('favorites', 'f')
    ->fields('f')
    ->condition('fid', $fid, '=')
    ->execute()
    ->fetchObject()
  ;
}

/**
 * Implements hook_theme().
 */
function favorites_theme() {
  return array(
    'favorites' => array(
      'variables' => array(
        'favorites' => array(),
      ),
    ),
  );
}

/**
 * Deletes a favorite.
 */
function favorites_remove_favorite($favorite) {
  global $user;
  $access = (user_access('manage own favorites') && $user->uid == $favorite->uid); // no admin page implemented yet! || user_access('manage all favorites');
  if (
    $access
    &&
    drupal_valid_token($_GET['token'], $favorite->timestamp . $favorite->uid . $favorite->path)
  ) {
    db_delete('favorites')
      ->condition('fid', $favorite->fid, '=')
      ->execute()
    ;
    if ($_GET['js'] == 1) {
      drupal_json_output(
        array(
          'list' => favorites_list(),
        )
      );
      return;
    }
  }
  else {
    drupal_set_message(
      t('You do not have permission to remove this favorite.'),
      'error'
    );
  }
  // Unless this is an AJAX request, the query string contains the redirection page.
  if (!$_GET['js']) {
    drupal_goto();
  }
}

/**
 * Implements hook_block_info().
 */
function favorites_block_info() {
  $blocks[0]['info'] = t('User Favorites block');
  $blocks[0]['cache'] = DRUPAL_NO_CACHE;
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function favorites_block_view($delta = 0) {
  if ($delta == 0 && user_access('manage own favorites')) {

    // Add Ajax support.
    drupal_add_js(drupal_get_path('module', 'favorites') . '/favorites.js');

    // Create the block content.
    // @todo: Return a render array instead.
    $form_id = drupal_get_form('favorites_add_favorite_form');
    $output = favorites_list() . drupal_render($form_id)
    ;
    return array(
      'subject' => t(variable_get('favorites_title', _favorites_default_value('favorites_title'))),
      'content' => $output,
    );
  }
}

/**
 * Generate the "My Favorites" list.
 */
function favorites_list() {
  drupal_add_js(drupal_get_path('module', 'favorites') . '/favorites.js');
  global $user;
  $favorites = favorites_load_favorites($user->uid);
  $out = '';
  if (count($favorites) == 0)
  {
	$out .= '<div class="favorites-none">' . t(variable_get('favorites_empty', _favorites_default_value('favorites_empty'))) . "</div>";
  }
  $out .= '<div id="favorites-list" class="favorites-list">' . 
  theme('favorites', array('favorites' => $favorites))  . '</div>';
  
  return $out;
}

/**
 * Theme callback.
 *
 * Return a themed item list of favorites with title, link and link to delete.
 */
function theme_favorites($favorites = array()) {
  $items = array();
  $destination = drupal_get_destination();
  $destination = explode('=', $destination['destination'], 2);
  $base_url = str_replace("internal","",url("internal"));	//get the internal base including the ?q= if needed
  foreach ($favorites['favorites'] as $favorite) {
	  $link = variable_get('favorites_link_markup', _favorites_default_value('favorites_link_markup'));
	  $link = str_replace('%favorite_token%',$favorite->token,$link);
	  $link = str_replace('%favorite_title%',$favorite->title,$link);
	  $link = str_replace('%favorite_path%',$favorite->path,$link);
	  $link = str_replace('%favorite_id%',$favorite->fid,$link);
	  $link = str_replace('%base_url%',$base_url,$link);
	  $link = str_replace('%destination%',$destination[0],$link);
	  $items[] = $link;
	  /*
	  //this was the original favorite link generator, which I've replaced
    $items[] = l(
      $favorite->title,
      $favorite->path,
      array('query' => unserialize($favorite->query))
    ) . ' ' . l(
      'x',
      'favorites/remove/' . $favorite->fid,
      array(
        'query' => array(
          'token' => $favorite->token,
          'destination' => $destination[0],
        ),
        'attributes' => array(
          'class' => 'favorites-remove',
          'title' => t('delete this item'),
        ),
      )
    );
	*/
  }  
  return theme('item_list', array('items' => $items, 'type' => 'ul'));
}

/**
 * Add a favorite.
 */
function favorites_add_favorite($values) {
  global $user;
  if (empty($user->uid)) {
    return;
  }
  // Normalize the path to the drupal internal path.
  // This helps in case the path alias changes or will be removed.
  $values['path'] = drupal_get_normal_path($values['path']);

  // Prepare the query values
  $values['query'] = drupal_get_query_array($values['query']);
  // Remove useless q value
  unset($values['query']['q']);
  $values['query'] = serialize($values['query']);

  // Delete an existing entry with the same link to avoid duplicates.
  db_delete('favorites')
    ->condition('uid', $user->uid, '=')
    ->condition('path', $values['path'], '=')
    ->condition('query', $values['query'])
    ->execute()
  ;

  db_insert('favorites')
    ->fields(array(
      'uid' => $user->uid,
      'path' => $values['path'],
      'query' => $values['query'],
      'title' => $values['title'],
      'timestamp' => REQUEST_TIME,
    ))
    ->execute()
  ;
}

/**
 * Form callback for the "add favorite form"
 *
 * @see favorites_user_block()
 */
function favorites_add_favorite_form($form, &$form_state) {
  global $user;

  // Try to get a default value for the title field.
  // drupal_get_title() has run through check_plain. This is useless for us
  // and needs to be fixed, which only works easily with PHP >= 5.1.
  if (
    function_exists('version_compare')
    &&
    version_compare(PHP_VERSION, '5.1.0', '>=')
  ) {
    $title = htmlspecialchars_decode(drupal_get_title());
  }
  if (!isset($title)) {
    $title = menu_get_active_title();
  }
  if ($title == '') {
    $title = variable_get('site_name', 'Home');
  }
  $title = strip_tags($title);

  $path = strip_tags($_GET['q']);
  $query = drupal_http_build_query($_GET);

  // Add a collapsible container.
  $form = array(
    'add' => array(
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#title' => t('add this page'),
      'title' => array(
        '#type' => 'textfield',
        '#size' => 20,
        '#maxlength' => 255,
        '#default_value' => $title,
        '#attributes' => array(
          'style' => 'width: 90%',
          'class' => array('favorites-add-textfield'),
        ),
      ),
      'submit' => array(
        '#type' => 'submit',
        '#value' => t("Add"),
        '#submit' => array('favorites_add_favorite_form_submit'),
      ),
      'path' => array(
        '#type' => 'value',
        '#value' => $path,
      ),
      'query' => array(
        '#type' => 'value',
        '#value' => $query,
      ),
    ),
  );
  //Preserve the current path with query string.
  $form_state['redirect'] = array(
    $_GET['q'],
    array(
      'query' => drupal_http_build_query($_GET),
    )
  );
  // Additionally add path and query to the JS settings.
  drupal_add_js(
    array(
      'favorites' => array(
        'path' => $path,
        'query' => $query,
        'addCallbackPath' => url('favorites/js/add'),
      ),
    ),
    'setting'
  );

  return $form;
}

/**
 * Submit callback for "add favorite" form.
 */
function favorites_add_favorite_form_submit($form, &$form_state) {
  favorites_add_favorite($form_state['values']);
}

/**
 * Load the favorites for a particular user.
 */
function favorites_load_favorites($uid = 0) {
  $favorites = array();
  if ($uid) {
    $result = db_select('favorites', 'f')
      ->fields('f')
      ->condition('uid', $uid, '=')
      ->orderBy('timestamp', 'DESC')
      ->execute()
    ;
    foreach ($result as $favorite) {
      $favorite->token = favorite_token($favorite);
      $favorite->path = drupal_get_path_alias($favorite->path);
      $favorites[] = $favorite;
    }
  }
  return $favorites;
}

/**
 * Generate a token for a particular favorite.
 */
function favorite_token($favorite = NULL) {
  return drupal_get_token($favorite->timestamp . $favorite->uid . $favorite->path);
}

/**
 * AHAH callback for add favorites form.
 *
 * @see favorites_add_favorite_form()
 */
function favorites_add_favorite_js() {
  favorites_add_favorite($_POST);
  drupal_json_output(
    array(
      'list' => favorites_list(),
    )
  );
}


function _favorites_admin() {
  
  $form = array();
  $form['favorites_instructions'] = array(
	'#markup' => '<p>Favorites is a block which must be added at admin/structure/blocks. When the favorites block is enabled, users will be able to use it. Permissions must also be set to use the block. Permissions can be set at the module page.</p>',
  );
  $form['favorites_link_markup'] = array(
    '#type' => 'textarea',
	'#wysiwyg' => false,
    '#title' => t('Markup for favorite link'),
    '#default_value' => variable_get('favorites_link_markup', _favorites_default_value('favorites_link_markup')),
    '#size' => 60,
    '#maxlength' => 1024,
    '#description' => t("The markup of the link to display in the block. Use
		\n<ul>
		\n<li>%favorite_token% for the removal token
		\n<li>%favorite_title% for the description
		\n<li>%favorite_path% for the link
		\n<li>%favorite_id% for the id
		\n<li>%base_url% the base url for the site, including the query string if used
		\n<li>%destination% the current destination
		\n</ul>"),
    '#required' => TRUE,
  );
  $form['favorites_user_tab_show'] = array(
	 '#type' => 'checkbox',
	 '#title' => t('Show My Favorites tab on user page'),
	 '#default_value' => variable_get('favorites_user_tab_show',_favorites_default_value('favorites_user_tab_show')),
  );
  $form['favorites_title'] = array(
    '#type' => 'textfield',
	'#wysiwyg' => false,
    '#title' => t('Title for favorite block'),
    '#default_value' => variable_get('favorites_title', _favorites_default_value('favorites_title')),
    '#size' => 60,
    '#maxlength' => 60,
    '#description' => t("This is the title of the favorites section in the block and user page"),
    '#required' => TRUE,
  );
  $form['favorites_empty'] = array(
    '#type' => 'textfield',
	'#wysiwyg' => false,
    '#title' => t('Text displayed if there are no favorites.'),
    '#default_value' => variable_get('favorites_empty', _favorites_default_value('favorites_empty')),
    '#size' => 60,
    '#maxlength' => 60,
    '#description' => t(""),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}
function favorites_form_alter(&$form, $form_state, $form_id)
{
	/*
	hook_menu is cached, so it's not called when the form is posted
	we can't use an on_submit callback for the form, because it fires before the database write
	so we end up here, rebuilding the menu when the admin form renders, because it will render
	after a submit when the new values are posted
	
	*/
	if ($form_id == '_favorites_admin')
	{
		menu_rebuild();
		menu_reset_static_cache();
	}
}
/**
 * Used for setting default values for forms
 */
function _favorites_default_value($key)
{
	$default['favorites_link_markup'] = '<a href="%base_url%/%favorite_path%">%favorite_title%</a>' . "\n" . '<sup><a class="favorites-remove" href="%base_url%favorites/remove/%favorite_id%&token=%favorite_token%&destination=%destination%"><small>x</small></a></sup>';
	$default['favorites_user_page'] = "Manage your favorite pages below.";
	$default['favorites_empty'] = "<i>No favorites defined.</i>";
	$default['favorites_user_tab_show'] = 1;
	$default['favorites_title'] = "My Favorites";
	return $default[$key];
}


function _favorites_objecthell($obj)
{
	ob_start();
	var_dump($obj);
	$dataDump = ob_get_clean();
	ob_end_clean();
	return $dataDump;
}
